/*
 * Copyright (c) 2011 LAAS/CNRS                       --  Feb 2011
 * All rights reserved.
 *
 * Redistribution and use  in source  and binary  forms,  with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice, this list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice,  this list of  conditions and the following disclaimer in
 *      the  documentation  and/or  other   materials provided  with  the
 *      distribution.
 *
 * THIS  SOFTWARE IS PROVIDED BY  THE  COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND  ANY  EXPRESS OR IMPLIED  WARRANTIES,  INCLUDING,  BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR  PURPOSE ARE DISCLAIMED. IN  NO EVENT SHALL THE COPYRIGHT
 * HOLDERS OR      CONTRIBUTORS  BE LIABLE FOR   ANY    DIRECT, INDIRECT,
 * INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE   OF THIS SOFTWARE, EVEN   IF ADVISED OF   THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

/*------------------------------------------------------------
 * 
 *                     --  Module  PR2SOFTMOTION  --
 * 
 *  Description:
 *  Creation date : Thu Feb 10 13:04:35 2011 
 *  Author: Xavier Broquere
 *  Modified by: Guido Manfredi
 * 
 *------------------------------------------------------------*/

module pr2SoftMotion {
    number:		    100211;
    version:		    "1.0";
    email:		    "openrobots@laas.fr";
    requires:		    genBasic, genManip, genHum, gbM;
    codels_requires:	    "softMotion-libs >= 3.4";
    internal_data:	    PR2SOFTMOTION_STR;
    lang:		    "c++";
   // clock_rate:               1000;
}; 

/*------------------------------------------------------------
 *	                   Structures and SDI
 *------------------------------------------------------------*/

import from genBasic {
 #include <genBasicStruct.h>
};

import from genHum {
 #include <genHumStruct.h>
};

import from genManip {
 #include <genManipStruct.h>
};


#include "gbGENOM.h"
#include <softMotion/softMotionStructGenom.h>

#include "pr2SoftMotionStruct.h"

typedef struct PR2SOFTMOTION_STR {
    GEN_BOOL isInit;
    GEN_BOOL holdSmthg;
    PR2SM_TRACK_STR trackStr;
    GEN_BOOL motionIsAllowed;
    PR2SM_timeScale timeScale;
    double speedLimit;
    double accelerationVelRatio;
    double jerkAccelerationRatio;
    PR2SM_QSTR qGoto;
    PR2SM_xyzHead xyzHead;
    PR2SM_PanTilt panTilt;	  
    PR2SM_gripperGrabRelease grabRelease;
    PR2SM_gripperSensorTresh sensorTresholds;
    GENHUM_HUMAN_DISTANCE humanDist;
    GEN_STRING128 humanDistPosterName;
    GEN_BOOL humanDistMode;
} PR2SOFTMOTION_STR;


/*------------------------------------------------------------
 *	                       Requests
 *------------------------------------------------------------*/

/*  */
request Init {
    doc:		    "Initialize module";
    type:		    init;
    exec_task:		    Main; 
    codel_main:		    pr2SoftMotionInitMain;
    fail_reports:	    CANNOT_INIT_ROS, CANNOT_CREATE_ROS_NODE, CANNOT_SUSCRIBE_TO_TOPIC; 
    interrupt_activity:	    all;
};


/*  */
request SetSpeedLimit {
    doc:		    "Set the maximum speed (used to compute the maximum acceleration and jerk)";
    type:		    control;
    input:		    speedLimit::speedLimit;
    input_info:		    0.5::"speedLimit";
};

request SetAccelRatio {
	doc:	"Set the acceleration threshold for contact detection";
	type:	control;
	input:	accelerationVelRatio::accelerationVelRatio;
	input_info:	2.0::"accelRatio";
};


request SetJerkRatio {
	doc:	"<some doc>";
	type:	control;
	input:	jerkAccelerationRatio::jerkAccelerationRatio;
	input_info:	3.0::"jerkRatio";	
};

request SetGripperTresholds {
    doc:                    "Set the grab/release tresholds for acceleration and slip";
    type:                   control;
    input:                  sensorTresholds::sensorTresholds;
    input_info:             4.0::"grabAcc", 0.05::"grabSlip", 4.0::"releaseAcc", 0.05::"releaseSlip", 10::"holdForce";
};

/*  */
request SetTimeScale {
    doc:		    "Set the velocity of the time evolution along the trajectory";
    type:		    control;
    input:		    timeScale::timeScale;
    input_info:	            "PR2SYN TORSO HEAD RARM LARM BASE"::"timeScale";
    codel_control:	    pr2SoftMotionSetTimeScaleCntrl;
    fail_reports:	    WRONG_VALUE;
    interrupt_activity:	    SetTimeScale;
};

/* Read current state of the gripper */
request HoldSmthg {
    doc:		    "Asks if the robot hold something in the right hand";
    type:		    control;
    codel_control:	    pr2SoftMotionHoldSmthgCntrl;
    output:                 holdSmthg::holdSmthg;
    interrupt_activity:	    HoldSmthg;
};

/*  */
request TrackQ {
    doc:		    "Execute the trajectory written in a file/poster";
    type:		    exec;
    exec_task:		    Main; 
    input:		    posterName::trackStr; 
    input_info:		    "mhpArmTraj"::"Poster or File name" , PR2SM_TRACK_POSTER::"Mode", PR2::"Robot part";			    
    posters_input:	    SM_TRAJ_STR;
    codel_start:	    pr2SoftMotionTrackQStart;
    codel_main:		    pr2SoftMotionTrackQMain;
    codel_end:		    pr2SoftMotionTrackQEnd;
    fail_reports:           NOT_INITIALIZED, BAD_MODE, POSTER_NOT_FOUND, POSTER_READ_ERROR, FILE_NOT_FOUND, ERROR_INIT_POSITION, Q_LIMITED; 
    interrupt_activity:	    TrackQ; 
};

/*  
request TrackNav {
    doc:		    "Move the base along the trajectory written in a file/poster";
    type:		    exec;
    exec_task:		    Main; 
    input:		    posterName::trackStr; 
    input_info:		    "mhpArmTraj"::"Poster or File name" , PR2SM_TRACK_POSTER::"Mode";			    
    posters_input:	    SM_TRAJ_STR;
    codel_start:	    pr2SoftMotionTrackNavStart;
    codel_main:		    pr2SoftMotionTrackNavMain;
    codel_end:		    pr2SoftMotionTrackNavEnd;
    fail_reports:           NOT_INITIALIZED, BAD_MODE, POSTER_NOT_FOUND, POSTER_READ_ERROR, FILE_NOT_FOUND, ERROR_INIT_POSITION, Q_LIMITED; 
    interrupt_activity:	    TrackNav; 
};
*/

request GotoQ {
    doc:		    "Go from the current position to the given position";
    type:		    exec;
    exec_task:		    Main; 
    input:		    qGoto::qGoto; 
    codel_start:	    pr2SoftMotionGotoQStart;
    codel_main:		    pr2SoftMotionGotoQMain;
    codel_end:		    pr2SoftMotionGotoQEnd;
    fail_reports:           NOT_INITIALIZED, SOFTMOTION_ERROR; 
    interrupt_activity:	    GotoQ; 
};

request MoveHead {
    doc:		    "Look at given x y z";
    type:		    exec;
    exec_task:		    Main; 
    input:		    xyzHead::xyzHead; 
    input_info:		    0::"x", 0::"y", 0::"z", "/map"::"frame"; 
    codel_start:	    pr2SoftMotionMoveHeadStart;
    codel_main:		    pr2SoftMotionMoveHeadMain;
    codel_end:		    pr2SoftMotionMoveHeadEnd;
    fail_reports:           NOT_INITIALIZED, SOFTMOTION_ERROR; 
    interrupt_activity:	    MoveHead; 
};

request GetPanTiltFromXYZ {
    doc:		    "Get pan tilt to look at given x y z";
    type:		    exec;
    exec_task:		    Main; 
    input:		    xyzHead::xyzHead; 
    input_info:		    0::"x", 0::"y", 0::"z", "/map"::"frame"; 
    output:		    panTilt::panTilt;
    codel_main:		    pr2SoftMotionGetPanTiltFromXYZMain;
    fail_reports:           NOT_INITIALIZED, SOFTMOTION_ERROR; 
    interrupt_activity:	    GetPanTiltFromXYZ; 
};

request GripperGrabRelease {
    doc:                    "Allows to command the gripper and use adaptive grasping";
    type:                   exec;
    exec_task:              Main;
    input:                  grabRelease::grabRelease;
    input_info:             OPEN::"mode";
    codel_start:            pr2SoftMotionGripperGrabReleaseStart;
    codel_main:             pr2SoftMotionGripperGrabReleaseMain;
    codel_end:              pr2SoftMotionGripperGrabReleaseEnd;
    fail_reports:           NOT_INITIALIZED, SOFTMOTION_ERROR;
    interrupt_activity:     GripperGrabRelease;
};

/* SetHumanDistancePoster for timeScale */
request SetHumanDistancePoster {
    doc:                    "<some doc>";
    type:                   exec;
    exec_task:              Main;
    input:                  humanDistPosterName::humanDistPosterName;
    input_info:             "spark"::"posterName";
    posters_input:          GENHUM_HUMAN_DISTANCE;
    codel_main:             pr2SoftMotionSetHumanDistancePosterMain;
    fail_reports:           CANNOT_FIND_POSTER, CANNOT_READ_POSTER;
    interrupt_activity:     SetHumanDistancePoster;
};

/*  */
request SetHumanDistanceMode {
    doc:                    "<some doc>";
    type:                   control;
    input:                  humanDistMode::humanDistMode;
    input_info:             GEN_TRUE::"mode";
    interrupt_activity:     SetHumanDistanceMode;
};

/*------------------------------------------------------------
 *	                        Posters
 *------------------------------------------------------------*/


/*------------------------------------------------------------
 *	                   Execution Tasks
 *------------------------------------------------------------*/


/*  */
exec_task Main {
    period:		    PR2SM_PERIOD_TIC;
    delay:		    1;
    priority:		    1;
    stack_size:		    4000000;
    codel_task_end:	    pr2SoftMotionMainEnd;
    codel_task_main:	    pr2SoftMotionMainPerm;
};
